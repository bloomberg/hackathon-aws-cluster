{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "COA Hackathon VPC",
  "Parameters": {
    "KeyName": {
      "Description": "EC2 KeyPair for admin access to the access node.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "ElasticIp": {
      "Description": "AllocationId of Elastic IP to use for access node.",
      "Type": "String"
    },
    "AccessInboundCidrIp": {
      "Description": "IP address or CIDR range which should have access to the access node (e.g. your IP, 1.2.3.4/32, ...).",
      "Type": "String"
    },
    "AccessNodeImageId": {
      "Description": "ID of AMI to be used for access node",
      "Type": "String"
    },
    "AccessNodeInstanceType": {
      "Description": "Instance type to be used for access node",
      "Type": "String"
    }
  },
  "Outputs": {
    "KeyName": {
      "Description": "KeyName",
      "Value": { "Ref": "KeyName" }
    },
    "VpcId": {
      "Description": "VpcId",
      "Value": { "Ref": "Vpc" }
    },
    "Bucket": {
      "Description": "Bucket",
      "Value": { "Ref": "Bucket" }
    },
    "IamProfile": {
      "Description": "IamProfile",
      "Value": { "Ref": "IamProfile" }
    },
    "SecGroupAccess": {
      "Description": "SecGroupAccess",
      "Value": { "Ref": "SecGroup" }
    },
    "PrivateRouteTable": {
      "Description": "PrivateRouteTable",
      "Value": { "Ref": "PrivateRoute" }
    }
  },
  "Resources": {
    "Bucket": {
      "Type": "AWS::S3::Bucket"
    },
    "IamProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "IamRole" } ]
      }
    },
    "IamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "IamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "s3plz",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "s3:ListBucket" ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [ "s3:GetObject", "s3:PutObject", "s3:DeleteObject" ],
              "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "Bucket" }, "/*" ] ] }
            },
            {
              "Effect": "Allow",
              "Action": [ "s3:GetObject", "s3:PutObject", "s3:DeleteObject" ],
              "Resource": "arn:aws:s3:::coa-hackathon/*"
            }
          ]
        },
        "Roles": [ { "Ref": "IamRole" } ]
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "192.168.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "PublicNet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "192.168.254.0/24",
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "Igw": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "IgwAttach": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "Vpc" },
        "InternetGatewayId": { "Ref": "Igw" }
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "IgwRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": { "Ref": "PublicRoute" },
        "GatewayId": { "Ref": "Igw" }
      },
      "DependsOn": "IgwAttach"
    },
    "PublicIgwRoute": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRoute" },
        "SubnetId": { "Ref": "PublicNet" }
      }
    },
    "EipNatgw": {
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" },
      "DependsOn": "IgwAttach"
    },
    "Natgw": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "EipNatgw", "AllocationId" ] },
        "SubnetId": { "Ref": "PublicNet" }
      },
      "DependsOn": "PublicIgwRoute"
    },
    "NatgwRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": { "Ref": "PrivateRoute" },
        "NatGatewayId": { "Ref": "Natgw" }
      },
      "DependsOn": "Natgw"
    },
    "DhcpOpts": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "eu-west-1.compute.internal",
        "DomainNameServers": [ "AmazonProvidedDNS" ]
      }
    },
    "DhcpOptsAssoc": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": { "Ref": "Vpc" },
        "DhcpOptionsId": { "Ref": "DhcpOpts" }
      }
    },
    "SecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Access Node",
        "VpcId": { "Ref": "Vpc" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "AccessInboundCidrIp" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": { "Ref": "AccessInboundCidrIp" }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": { "Ref": "AccessInboundCidrIp" }
          }
        ]
      }
    },
    "accessWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": { }
    },
    "accessWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Handle": { "Ref": "accessWaitHandle" },
	"Timeout": "1200",
	"Count": "1"
      }
    },
    "access": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": { "Ref": "AccessNodeImageId" },
        "InstanceType": { "Ref": "AccessNodeInstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "SubnetId": { "Ref": "PublicNet" },
        "SecurityGroupIds": [ { "Ref": "SecGroup" } ],
        "IamInstanceProfile": { "Ref": "IamProfile" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
		"wget -O /var/www/html/index.html https://raw.githubusercontent.com/bloomberg/jepsen-training-vpc/coa-hackathon/index.html\n",
		"wget -O /etc/apache2/sites-available/proxies.conf https://raw.githubusercontent.com/bloomberg/jepsen-training-vpc/coa-hackathon/proxies.conf\n",
		"a2ensite proxies\n",
		"service apache2 restart\n",
		"cfn-signal '", { "Ref": "accessWaitHandle" }, "' \n"
              ]
            ]
          }
        }
      },
      "DependsOn": "IgwAttach"
    },
    "EipAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": { "Ref": "ElasticIp" },
        "InstanceId": { "Ref": "access" }
      }
    }
  }
}
